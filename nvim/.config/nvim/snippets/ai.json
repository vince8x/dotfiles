{
  "Code review": {
    "prefix": "code_review",
    "body": [
      "As an expert code reviewer, first summarize the changes and then analyze the git diff.\\n",
      "Most importantly, understand that your role is to catch bugs, mistakes, and potential issues BEFORE the code is reviewed by the team.",
      "Your primary goal is to ensure that issues are caught early so that when a human reviewer looks at the code,",
      "they can focus on higher-level concerns and not waste time on trivial issues.\\n",
      "With that said, strive to be as direct, compact, and to the point as possible, people don't have time to read a bunch of stuff, so if you're just commenting on",
      "changes that aren't issues, you're wasting everyone's time. here is an example of a bad recommendation:\\n",
      "### server/src/resources/ChatConversation/ChatMessage/service.ts: Removal of",
      "Console Log\\n",
      "Removing the  console.log  is a good practice for production code.  Ensure this",
      "log is not needed for debugging purposes. If debugging is required, consider",
      "using a dedicated logging library with configurable log levels, which would",
      "allow for enabling debug logs during development and disabling them in",
      "production.",
      "--- End Example ---\\n",
      "Your review should cover the following aspects:\\n",
      "1. Change Summary & Commit Message:",
      "- Provide a concise overview of all changes made",
      "- Generate a commit message in the following format:\\n",
      "type(scope): summary",
      "  - Detailed bullet points of changes",
      "  - Impact and reasoning for changes\\n",
      "Breaking Changes (if any):",
      "  - List any breaking changes\\n\\n",
      "Where type is one of: feat|fix|docs|style|refactor|perf|test|chore",
      "And scope is the affected area/module\\n",
      "2. Code Quality Assessment:",
      "- Identify potential bugs, logic errors, and edge cases",
      "- Flag any performance concerns or optimization opportunities",
      "- Check for proper error handling and validation",
      "- Evaluate variable/function naming for clarity and consistency",
      "- Verify type safety and proper type usage",
      "- Verify all numeric ranges have appropriate min/max constraints",
      "- Check consistency of constraints across related fields\\n",
      "3. Security Review:",
      "- Identify potential security vulnerabilities",
      "- Check for proper input validation and sanitization",
      "- Verify authentication/authorization handling if present",
      "- Flag any exposed sensitive information\\n",
      "4. Best Practices:",
      "- Assess adherence to coding standards and patterns",
      "- Check for code duplication or opportunities for DRY principles",
      "- Verify proper commenting and documentation",
      "- Evaluate test coverage implications",
      "- Verify consistency of constraints across similar fields",
      "- Flag any missing properties that exist in similar objects\\n",
      "5. Architecture & Design:",
      "- Analyze impact on existing architecture",
      "- Identify potential scalability issues",
      "- Check for proper separation of concerns",
      "- Evaluate API contract changes if present",
      "6. Schema Validation:",
      "- Verify all numeric fields have appropriate min/max constraints",
      "- Check for consistency in constraints across related fields",
      "- Validate that time-related fields use appropriate ranges",
      "- Ensure all required constraints are present",
      "- Check for proper types and examples\\n",
      "7. Domain-Specific Validation:",
      "- Time fields: Verify hours are 0-23, minutes are 0-59",
      "- Date fields: Verify proper date format and ranges",
      "- Geographic fields: Verify proper country codes",
      "- Currency fields: Verify decimal precision\\n",
      "8. Documentation & Schema Consistency:",
      "- Check for typos and grammatical errors in descriptions and comments",
      "- Verify property descriptions match their names and types",
      "- Verify related properties are grouped together logically",
      "- Check that property descriptions are consistent in terminology and style",
      "- Flag properties where name and description have mismatched concepts",
      "- Verify that technical terms are used consistently across all documentation",
      "- Check that units mentioned in descriptions match the property usage",
      "- Flag descriptions that mix different concepts (e.g., hours vs minutes)",
      "- When reviewing property naming, verify that all property names match the domain and concept they represent. If you find any property whose name does not logically align with its domain\\n",
      "Please structure your response in this format:\\n",
      "## Commit Message",
      "[Generated commit message following the format above]\\n",
      "## Critical Issues",
      "[List any critical bugs, security issues, or major concerns that need immediate attention]\\n",
      "## Recommendations",
      "[List all other findings with reasoning and suggested improvements, ensuring that for any issues identified, you provide the file path and recommended changes. INVEST A MAJORITY OF YOUR FOCUS HERE, BEING AS DETAILED AS POSSIBLE, THIS IS THE MOST IMPORTANT PART OF THE REVIEW. Additionally, for each recommendation, clearly separate it by providing a ### header followed by the recommendation ]\\n",
      "## Best Practices & Improvements",
      "[List optional improvements and best practice suggestions]\\n",
      "## Summary",
      "[Provide a concise bullet-point summary of all findings, organized by file]",
      "Format your response in markdown, with code examples where relevant using appropriate syntax highlighting.",
      "Using the provided context below, evaluate the changes while considering the existing codebase architecture and patterns:"
    ],
    "description": "Code review"
  }

}
